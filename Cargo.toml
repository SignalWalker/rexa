[workspace]
members = ["lib/*"]

[workspace.package]
authors = ["Ash Walker <ash@ashwalker.net>"]
repository = "https://github.com/SignalWalker/rexa"
license = "LGPL-3.0-or-later"

[package]
name = "rexa"
version = "0.1.0"
edition = "2021"
authors.workspace = true

rust-version = "1.76" # TODO :: check whether rexa compiles with earlier versions of rust

description = "An implementation of OCapN, a protocol for secure peer-to-peer networking."
readme = true
repository.workspace = true
license.workspace = true

categories = [
  "asynchronous",
  "authentication",
  "concurrency",
  "cryptography",
  "network-programming",
]
keywords = ["ocap", "ocapn", "object-capabilities"]


[dependencies]
rexa-proc = { path = "./lib/rexa-proc" }

# meta
thiserror = "^1.0"
tracing = "^0.1"


futures = { version = "^0.3" }
tokio = { version = "^1.36", optional = true, default-features = false, features = [
  "io-util",
  "sync",
] }

# captp
dashmap = { version = "^5" }
## crypto
rand = { version = "^0.8", features = [] }
ed25519-dalek = { version = "^2", features = ["rand_core"] }

# locators
# url = "^2.4"

# syrup
syrup = { path = "lib/syrup" }

# netlayers
# netlayer-mock
lazy_static = { version = "^1.4", optional = true }
## netlayer-onion
arti-client = { version = "^0.14", git = "https://gitlab.torproject.org/tpo/core/arti", features = [
  "onion-service-client",
  "onion-service-service",
], optional = true }
tor-rtcompat = { version = "^0.10", git = "https://gitlab.torproject.org/tpo/core/arti", optional = true }
tor-hsservice = { version = "^0.8", git = "https://gitlab.torproject.org/tpo/core/arti", optional = true }
tor-cell = { version = "^0.16", git = "https://gitlab.torproject.org/tpo/core/arti", optional = true }

[dev-dependencies]
lazy_static = { version = "^1.4" }

tracing-subscriber = { version = "^0.3", features = [
  "time",
  "env-filter",
  "parking_lot",
  "local-time",
  "json",
] }
time = { version = "^0.3", features = ["formatting", "local-offset", "macros"] }

[build-dependencies]

[features]
default = ["extra-diagnostics"]
extra-diagnostics = []
tokio = ["dep:tokio", "tor-rtcompat?/tokio"]
netlayer-mock = ["dep:lazy_static"]
netlayer-datastream = ["tokio?/net"]
netlayer-onion = [
  "dep:arti-client",
  "dep:tor-rtcompat",
  "dep:tor-hsservice",
  "dep:tor-cell",
]
test-deps = ["tokio", "tokio/rt-multi-thread", "tokio/process", "tokio/macros"]


[[test]]
name = "ocapn_test_suite"
required-features = ["netlayer-onion", "test-deps"]

[[test]]
name = "session"
required-features = ["netlayer-mock", "test-deps"]

[[test]]
name = "deliver"
required-features = ["netlayer-mock", "test-deps"]

[lints]
workspace = true

[workspace.lints.rust]
rust_2024_compatibility = "warn"
let_underscore = "warn"
fuzzy_provenance_casts = "warn"
lossy_provenance_casts = "warn"
meta_variable_misuse = "warn"
missing_abi = "warn"
multiple_supertrait_upcastable = "warn"
must_not_suspend = "deny"
unreachable_pub = "warn"
unsafe_code = "warn"
unsafe_op_in_unsafe_fn = "warn"
unstable_features = "warn"
unused_crate_dependencies = "warn"
unused_macro_rules = "warn"
variant_size_differences = "warn"
# embark studios standard (https://github.com/EmbarkStudios/rust-ecosystem/blob/main/lints.toml)
future_incompatible = "deny"
nonstandard_style = "warn"
rust_2018_idioms = "warn"
# end embark studios lints

[workspace.lints.clippy]
allow_attributes = "warn"
needless_pass_by_value = "warn"
# embark studios standard (https://github.com/EmbarkStudios/rust-ecosystem/blob/main/lints.toml)
all = "warn"
await_holding_lock = "warn"
char_lit_as_u8 = "warn"
checked_conversions = "warn"
dbg_macro = "warn"
debug_assert_with_mut_call = "warn"
doc_markdown = "warn"
empty_enum = "warn"
enum_glob_use = "warn"
exit = "warn"
expl_impl_clone_on_copy = "warn"
explicit_deref_methods = "warn"
explicit_into_iter_loop = "warn"
fallible_impl_from = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
float_cmp_const = "warn"
fn_params_excessive_bools = "warn"
from_iter_instead_of_collect = "warn"
if_let_mutex = "warn"
implicit_clone = "warn"
imprecise_flops = "warn"
inefficient_to_string = "warn"
invalid_upcast_comparisons = "warn"
large_digit_groups = "warn"
large_stack_arrays = "warn"
large_types_passed_by_value = "warn"
let_unit_value = "warn"
linkedlist = "warn"
lossy_float_literal = "warn"
macro_use_imports = "warn"
manual_ok_or = "warn"
map_err_ignore = "warn"
map_flatten = "warn"
map_unwrap_or = "warn"
match_on_vec_items = "warn"
match_same_arms = "warn"
match_wild_err_arm = "warn"
match_wildcard_for_single_variants = "warn"
mem_forget = "warn"
mismatched_target_os = "warn"
missing_enforced_import_renames = "warn"
mut_mut = "warn"
mutex_integer = "warn"
needless_borrow = "warn"
needless_continue = "warn"
needless_for_each = "warn"
option_option = "warn"
path_buf_push_overwrite = "warn"
ptr_as_ptr = "warn"
rc_mutex = "warn"
ref_option_ref = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_functions_in_if_condition = "warn"
semicolon_if_nothing_returned = "warn"
single_match_else = "warn"
string_add_assign = "warn"
string_add = "warn"
string_lit_as_bytes = "warn"
string_to_string = "warn"
todo = "warn"
trait_duplication_in_bounds = "warn"
unimplemented = "warn"
unnested_or_patterns = "warn"
unused_self = "warn"
useless_transmute = "warn"
verbose_file_reads = "warn"
zero_sized_map_values = "warn"
# end embark studios standard

[workspace.lints.rustdoc]
missing_crate_level_docs = "warn"
